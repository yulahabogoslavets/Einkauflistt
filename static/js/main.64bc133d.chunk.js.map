{"version":3,"sources":["Components/ProduktsList.js","Components/ExpireList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","marginTop","backgroundColor","textField","ProduktList","props","classes","resList","prodList","map","elem","key","tempKey","className","TextField","type","value","tempText","id","onChange","e","handleChangeText","target","size","variant","style","margin","tempNumber","handleChangeNumber","tempDate","handleChangeDate","FormControlLabel","label","tempCheck","control","Checkbox","checked","handleChangeStatus","color","onClick","deleteElem","ExpireList","List","JSON","parse","localStorage","getItem","Fragment","disabled","App","checkDates","expArr","filter","Date","now","setItem","stringify","setState","state","addMemory","newEinkaufList","console","log","addElement","event","newItem","aktProdukt","newProdukts","produkts","handleInput","handleNumber","handleDate","removeEl","changeText","newText","tempArr","item","changeNumber","newNum","changeDate","newDate","changeStatus","tempvar","tempInterval","handle","setInterval","this","clearInterval","Typography","gutterBottom","textAlign","Grid","container","direction","marginLeft","InputLabelProps","shrink","Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64bc133d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DeleteOutlinedIcon from '@material-ui/icons/Delete';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        marginTop: 10,\r\n        backgroundColor: '#f2f3ea7d'\r\n    },\r\n    textField: {\r\n\r\n    },\r\n}));\r\n\r\nfunction ProduktList (props){\r\n    const classes = useStyles();\r\n\r\n        const tempProdukts = props.prodList;\r\n        const resList = tempProdukts.map(elem => {\r\n\r\n            return(\r\n                <div key = {elem.tempKey} className={classes.root}>\r\n                    <TextField\r\n                        type=\"text\"\r\n                        value={elem.tempText}\r\n                        id ={elem.tempKey}\r\n                        onChange ={(e)=>props.handleChangeText(elem.tempKey,e.target.value)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        style={{ margin: 2 }}\r\n                    />\r\n                    <TextField\r\n                        type=\"number\"\r\n                        value={elem.tempNumber}\r\n                        id={elem.tempKey}\r\n                        onChange ={(e)=>props.handleChangeNumber(elem.tempKey,e.target.value)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        style={{ margin: 2 }}\r\n                    />\r\n\r\n                    <TextField\r\n                        type=\"date\"\r\n                        value={elem.tempDate}\r\n                        id ={elem.tempKey}\r\n                        onChange ={(e)=>props.handleChangeDate(elem.tempKey,e.target.value)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        style={{ margin: 2 }}\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        label={elem.tempCheck===true?'Erledigt': 'Unerledigt'}\r\n\r\n                        control={\r\n                            <Checkbox\r\n                                value={elem.tempCheck}\r\n                                id={elem.tempKey}\r\n                                checked={elem.tempCheck}\r\n                                onChange ={(e)=>props.handleChangeStatus(elem.tempKey,e.target.value)}\r\n                                color=\"primary\"\r\n                                style={{ margin: 2 }}\r\n                            />\r\n                        }\r\n\r\n                    />\r\n\r\n                    <DeleteOutlinedIcon\r\n                        color=\"secondary\"\r\n                        style={{ margin: 10}}\r\n                        onClick={()=>props.deleteElem(elem.tempKey)} />\r\n                </div>\r\n            )\r\n\r\n            }\r\n\r\n        )\r\n        return(\r\n            <div>{resList} </div>\r\n        )\r\n\r\n}\r\n\r\nexport default ProduktList;","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nfunction ExpireList (props) {\r\n\r\n    const expArr=JSON.parse(localStorage.getItem('expArr'));\r\n            const List= expArr.map(elem=>{\r\n            return(\r\n                <React.Fragment>\r\n\r\n                <TextField\r\n                    value={elem.tempText}\r\n                    size=\"small\"\r\n                    variant=\"filled\"\r\n                    disabled\r\n                    style={{margin: 2}}\r\n\r\n                /><br/>\r\n                </React.Fragment>\r\n            )\r\n            }\r\n          )\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Expire List</h1>\r\n                <div>{List}</div>\r\n            </React.Fragment>\r\n        )\r\n}\r\n\r\nexport default ExpireList;","import React from \"react\";\n\nimport ProduktList from \"./Components/ProduktsList\";\nimport ExpireList from \"./Components/ExpireList\";\n\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nexport default class App extends React.Component{\n    constructor(props) {\n        super(props);\n        let tempvar=[];\n        if(localStorage.getItem('LocalData')!==null)\n            tempvar=JSON.parse(localStorage.getItem('LocalData'));\n        this.state= {\n            produkts: tempvar,\n            aktProdukt:{\n                tempText: '',\n                tempKey: '',\n                tempNumber: '',\n                tempDate: '',\n                tempCheck: false,\n                tempInterval: ''\n            }\n        }\n    }\n\n    componentDidMount() {\n        const handle =setInterval(this.checkDates, 1000)\n       this.setState(\n       {\n           tempInterval: handle\n\n       })\n\n    }\n\n    componentWillUnmount()\n    {\n\n        clearInterval(this.state.tempInterval)\n    }\n    checkDates=()=>{\n        const tempVar=JSON.parse(localStorage.getItem('LocalData'));\n        const expArr = tempVar.filter(elem =>\n        {\n            let dateConvert = Date.parse(elem.tempDate);\n            return ( dateConvert < Date.now()&& elem.tempCheck===false)\n        })\n       localStorage.setItem('expArr', JSON.stringify(expArr));\n        this.setState(this.state)\n    }\n\n\n\n\n    addMemory=(newEinkaufList)=>{\n        localStorage.setItem('LocalData', JSON.stringify(newEinkaufList));\n        console.log(localStorage);\n    }\n\n    addElement=(event)=>{\n        const newItem = this.state.aktProdukt;\n        if(newItem.tempText!==\"\"){\n            const newProdukts = [...this.state.produkts, newItem];\n\n            this.addMemory(newProdukts);\n\n            this.setState({\n                produkts: newProdukts,\n                aktProdukt:{\n                    tempText: '',\n                    tempKey: '',\n                    tempNumber: '',\n                    tempDate: ''\n                }\n            })\n        }\n    }\n    handleInput = (event) =>{\n        this.setState({\n            aktProdukt: {\n                tempText: event.target.value,\n                tempKey: Date.now(),\n                tempNumber: this.state.aktProdukt.tempNumber,\n                tempDate: this.state.aktProdukt.tempDate,\n                tempCheck: this.state.aktProdukt.tempCheck\n            }\n        })\n    }\n    handleNumber = (event) => {\n        this.setState({\n            aktProdukt: {\n                tempNumber: event.target.value,\n                tempText: this.state.aktProdukt.tempText,\n                tempKey: this.state.aktProdukt.tempKey,\n                tempDate: this.state.aktProdukt.tempDate,\n                tempCheck: this.state.aktProdukt.tempCheck\n            }\n        })\n    }\n    handleDate = (event) => {\n        this.setState({\n            aktProdukt: {\n                tempDate: event.target.value,\n                tempText: this.state.aktProdukt.tempText,\n                tempNumber: this.state.aktProdukt.tempNumber,\n                tempKey: this.state.aktProdukt.tempKey,\n                tempCheck: this.state.aktProdukt.tempCheck\n            }\n        })\n    }\n\n    deleteElem = (key) => {\n        const removeEl = this.state.produkts.filter(elem => elem.tempKey !== key);\n\n        this.addMemory(removeEl);\n\n        this.setState({\n            produkts: removeEl\n        })\n    }\n\n    changeText = (id, newText) => {\n        const tempArr= this.state.produkts;\n        tempArr.map(item => {\n            if(item.tempKey === id) {\n                item.tempText = newText;\n            }\n        })\n\n        this.addMemory(tempArr);\n\n        this.setState({\n            produkts: tempArr\n        })\n    }\n    changeNumber = (id, newNum) => {\n        const tempArr = this.state.produkts;\n        tempArr.map(item => {\n            if (item.tempKey === id) {\n                item.tempNumber = newNum ;\n            }\n        })\n\n        this.addMemory(tempArr);\n\n        this.setState({\n            produkts: tempArr\n        })\n    }\n    changeDate = (id, newDate) => {\n        const tempArr = this.state.produkts;\n        tempArr.map(item => {\n            if (item.tempKey === id) {\n                item.tempDate = newDate ;\n            }\n        })\n\n        this.addMemory(tempArr);\n\n        this.setState({\n            produkts: tempArr\n        })\n    }\n    changeStatus= (id) => {\n        const tempArr = this.state.produkts;\n        tempArr.map(item => {\n            if (item.tempKey === id) {\n                item.tempCheck = !item.tempCheck ;\n            }\n        })\n\n        this.addMemory(tempArr);\n\n        this.setState({\n            produkts: tempArr\n        })\n    }\n\n\n    render(){\n        return(\n            <React.Fragment>\n                <Typography variant=\"h3\"\n                            color=\"primary\"\n                            gutterBottom\n                            style={{ textAlign: \"center\" }}\n                >\n                    Einkaufsplaner\n                </Typography>\n                <Grid container\n                      direction=\"row\"\n                >\n                    <form>\n                        <TextField\n                            label=\"Produkt\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            value = {this.state.aktProdukt.tempText}\n                            onChange={this.handleInput}\n                            style={{ margin: 2 }}\n                        />\n\n                        <TextField\n                            label=\"Anzahl\"\n                            type=\"number\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            style={{ marginLeft: 5 }}\n                            value = {this.state.aktProdukt.tempNumber}\n                            onChange={this.handleNumber}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            label=\"\"\n                            type=\"date\"\n                            variant=\"outlined\"\n                            size=\"small\"\n                            style={{ marginLeft: 5 }}\n                            value = {this.state.aktProdukt.tempDate}\n                            onChange={this.handleDate}\n                        />\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"normal\"\n                            style={{ marginLeft: 5,\n                                marginTop: 2\n                            }}\n                            onClick={this.addElement}\n                        >\n                            Add\n                        </Button>\n\n                    </form>\n\n                    <ProduktList prodList={this.state.produkts}\n                                 deleteElem={this.deleteElem}\n                                 handleChangeText = {this.changeText}\n                                 handleChangeNumber = {this.changeNumber}\n                                 handleChangeDate = {this.changeDate}\n                                 handleChangeStatus = {this.changeStatus}\n                    />\n                </Grid>\n                    <ExpireList/>\n\n            </React.Fragment>\n\n        )\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}